#
# This file is a Makefile for Surf2fits.  If it has the name "Makefile.in"
# then it is a template for a Makefile;  to generate the actual Makefile,
# run "./configure", which is a configuration script generated by the
# "autoconf" program (constructs like "@foo@" will get replaced in the
# actual Makefile.
#

PACKAGE = @PACKAGE_NAME@
VERSION = @PACKAGE_VERSION@

DISTNAME = surf2fits

#----------------------------------------------------------------
# Things you can change to personalize the Makefile for your own
# site (you can make these changes in either Makefile.in or
# Makefile, but changes to Makefile will get lost if you re-run
# the configuration script).
#----------------------------------------------------------------

# Default top-level directories in which to install architecture-
# specific files (exec_prefix) and machine-independent files such
# as scripts (prefix).  The values specified here may be overridden
# at configure-time with the --exec-prefix and --prefix options
# to the "configure" script.

prefix =		@prefix@
exec_prefix =		@exec_prefix@

# The following definition can be set to non-null for special systems
# like AFS with replication.  It allows the pathnames used for installation
# to be different than those used for actually reference files at
# run-time.  INSTALL_ROOT is prepended to $prefix and $exec_prefix
# when installing files.
INSTALL_ROOT = $(DESTDIR)

# Directory in which to install program(s):
BIN_INSTALL_DIR =	$(INSTALL_ROOT)$(exec_prefix)/bin

# Directory in which to install the .a or .so binary for the library:
LIB_INSTALL_DIR =	$(INSTALL_ROOT)$(exec_prefix)/lib

# Directory in which to install the include file(s):
INCLUDE_INSTALL_DIR =	$(INSTALL_ROOT)$(prefix)/include

# Top-level directory for manual entries:
MAN_INSTALL_DIR =	$(INSTALL_ROOT)$(prefix)/share/man

# Top-level directory for share entries:
MAN_SHARE_DIR =		$(INSTALL_ROOT)$(prefix)/share

# Some versions of make, like SGI's, use the following variable to
# determine which shell to use for executing commands:
SHELL =			/bin/sh

# There are just too many different versions of "install" around;
# better to use the install-sh script that comes with the distribution,
# which is slower but guaranteed to work.

INSTALL = 		@srcdir@/install-sh -c
INSTALL_PROGRAM =	${INSTALL}
INSTALL_DATA =		${INSTALL} -m 644

# which awk-like program do we have?
AWK =		@AWK@

#----------------------------------------------------------------
# The information below is modified by the configure script when
# Makefile is generated from Makefile.in.  You shouldn't normally
# modify any of this stuff by hand.
#----------------------------------------------------------------

# does ranlib exist?
RANLIB =	@RANLIB@

# special suffix on programs (Windows)?
EXE =		@EXEEXT@

# which compiler are we using?
CC  =		@CC@

# defines from configure (including check for dynamic linking)
AC_FLAGS =	@DEFS@ @HAVE_DL@

# extra includes
EXTRA_INCS =	@EXTRA_INCS@

# To change the compiler switches, for example to change from -O
# to -g, change the following line:
CFLAGS =	@CFLAGS@ $(EXTRA_INCS) $(AC_FLAGS)

# To add ld switches, change the following line:
LDFLAGS =	@LDFLAGS@

# extra libraries we need for linking
EXTRA_LIBS =	@EXTRA_LIBS@ -lm

#----------------------------------------------------------------
# The information below should be usable as is.  The configure
# script won't modify it and you shouldn't need to modify it
# either.
#----------------------------------------------------------------

RM =		rm -rf
LEX =		flex -i
AR =		ar cruv

UTIL =		./util
USRCS =		$(UTIL)/file.c \
		$(UTIL)/macro.c \
		$(UTIL)/xalloc.c \
		$(UTIL)/xerror.c
UOBJS = 	$(USRCS:%.c=%.o)

SRCS =		surf2fits.c
OBJS = 		$(SRCS:%.c=%.o)

TESTDIR =	./test
DOC =		./doc

PROGS =		surf2fits

INCS =		surf2fits.h

IDIRS =		$(LIB_INSTALL_DIR) $(INCLUDE_INSTALL_DIR) $(BIN_INSTALL_DIR)

all:		progs

progs:		$(PROGS)

# automatic variables defined in:
# http://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html
surf2fits:	$(UOBJS) $(OBJS)
		$(CC) $(LDFLAGS) $(CFLAGS) -o $@ $+ $(EXTRA_LIBS)

install:	$(PROGS) $(LIBS) FORCE
		@(for i in $(IDIRS) ; do \
		    if [ ! -d $$i ] ; then \
			echo "Making directory $$i"; \
			mkdir -p $$i; chmod 755 $$i; \
		    fi; \
		  done; \
	          for i in $(PROGS); do\
		    j=$$i$(EXE); \
		    echo "Installing $$j" ; \
		    $(INSTALL_PROGRAM) $$j $(BIN_INSTALL_DIR)/$$j ; \
		  done;)

clean:		FORCE
		@($(RM) *{.a,.so,.so.?,.so.?.?,.o,.dylib} \
		  $(PROGS) $(TPROGS) \
		  *.exe core core.[0-9]* errs *pure* .nfs* \
		  foo* *~ *.log \#* TAGS *.E a.out errors \
		  gmon.out *.pg *.bak regtest.{pr,dy,co} \
		  config.info config.log autom4te.cache *.dSYM; \
		  $(RM) $(UTIL)/*{~,.o};)

Makefile:	Makefile.in
		$(SHELL) config.status

tar:
		($(RM) config.cache; \
		cd ..; \
		tar cf - -X $(DISTNAME)/tar.excl $(DISTNAME) | \
		gzip -c > $(DISTNAME).tar.gz)

errcheck:	FORCE
		@(egrep '[^x]error|warning|ld:|collect2:|make:' foo | \
		  egrep -v "^lex.*but not used"; true)

FORCE:
